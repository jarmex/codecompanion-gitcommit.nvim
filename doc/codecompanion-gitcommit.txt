*codecompanion-gitcommit.txt*	For Neovim >= 0.8.0	Last change: 2025 Jan 02

CODECOMPANION GIT COMMIT EXTENSION			*codecompanion-gitcommit*

A CodeCompanion extension that generates AI-powered git commit messages
following the Conventional Commits specification, with powerful Git tool
integration.

==============================================================================
CONTENTS						*codecompanion-gitcommit-contents*

1. Introduction					|codecompanion-gitcommit-intro|
2. Features					|codecompanion-gitcommit-features|
3. Installation					|codecompanion-gitcommit-install|
4. Usage					|codecompanion-gitcommit-usage|
5. Commands					|codecompanion-gitcommit-commands|
6. Git Tools					|codecompanion-gitcommit-git-tools|
7. Configuration				|codecompanion-gitcommit-config|
8. License					|codecompanion-gitcommit-license|

==============================================================================
1. INTRODUCTION					*codecompanion-gitcommit-intro*

The CodeCompanion Git Commit Extension is a powerful tool that leverages AI
to generate meaningful git commit messages following the Conventional Commits
specification. It integrates seamlessly with CodeCompanion's LLM adapters to
analyze your staged changes and create appropriate commit messages.

The extension provides comprehensive Git operations through @git_read and
@git_edit tools, offering a natural language interface for Git workflow
management within CodeCompanion chat buffers.

==============================================================================
2. FEATURES					*codecompanion-gitcommit-features*

🤖 AI Commit Generation
• Generate commit messages using CodeCompanion's LLM adapters
• Conventional Commits specification compliance
• Multi-language support for commit messages
• Support for regular commits and amend commits

🛠️ Git Tool Integration
• @git_read tool - Execute read-only Git operations through chat
• @git_edit tool - Execute write-access Git operations through chat
• Natural language interface for Git workflow control
• Automatic approval requirements for destructive operations

📝 Smart Integration
• Smart keymap integration for gitcommit buffers
• Automatic git repository detection
• Support for user commands and slash commands
• File filtering support using glob patterns

==============================================================================
3. INSTALLATION					*codecompanion-gitcommit-install*

Add this extension to your CodeCompanion configuration:
>lua
	require("codecompanion").setup({
	  extensions = {
	    gitcommit = {
	      callback = "codecompanion._extensions.gitcommit",
	      opts = {
	        -- Basic configuration
	        adapter = "openai",                    -- LLM adapter
	        model = "gpt-4",                      -- Model name
	        languages = { "English", "Chinese" }, -- Supported languages
	        
	        -- File filtering (optional)
	        exclude_files = { 
	          "*.pb.go", "*.min.js", "package-lock.json",
	          "dist/*", "build/*", "node_modules/*"
	        },
	        
	        -- Buffer integration
	        buffer = {
	          enabled = true,              -- Enable gitcommit buffer keymaps
	          keymap = "<leader>gc",       -- Keymap for generating commit messages
	          auto_generate = true,        -- Auto-generate on buffer enter
	          auto_generate_delay = 100,   -- Auto-generation delay (ms)
	        },
	        
	        -- Feature toggles
	        add_slash_command = true,      -- Add /gitcommit slash command
	        add_git_tool = true,          -- Add @git_read and @git_edit tools
	        add_git_commands = true,      -- Add :CodeCompanionGit commands
	      }
	    }
	  }
	})
<

==============================================================================
4. USAGE					*codecompanion-gitcommit-usage*

Basic workflow:

1. Stage your changes: >
	git add .
<
2. Generate commit message: >
	:CodeCompanionGitCommit
<
3. Review the generated commit message in the floating window

4. Choose an action:
   • c - Copy to clipboard
   • y - Copy to yank register
   • s - Submit changes
   • Enter - Copy and close
   • q/Esc - Close

GitCommit buffer integration:

1. Run `git commit` to open commit buffer
2. If `auto_generate` is enabled, message appears automatically
3. Otherwise, press `<leader>gc` in normal mode to generate
4. Edit as needed and save to complete the commit

==============================================================================
5. COMMANDS					*codecompanion-gitcommit-commands*

*:CodeCompanionGitCommit*
	Generate Git commit message

*:CCGitCommit*
	Generate Git commit message (short alias)

*:CodeCompanionGit*
	Open Git assistant chat

*:CCGit*
	Open Git assistant chat (short alias)

==============================================================================
6. GIT TOOLS					*codecompanion-gitcommit-git-tools*

Use Git tools in CodeCompanion chat:

Read-only operations (@git_read):			*git_read*

• status - Show repository status
• log - Show commit history
• diff - Show file differences
• branch - List branches
• remotes - Show remote repositories
• show - Show commit details
• blame - Show file blame information
• contributors - Show contributors
• search_commits - Search commit messages
• tags - List all tags

Write operations (@git_edit):				*git_edit*

• stage/unstage - Stage/unstage files
• create_branch - Create new branch
• checkout - Switch branch/commit
• stash/apply_stash - Stash operations
• reset - Reset to specific commit
• gitignore_add/remove - Manage .gitignore
• push - Push changes to remote repository
• rebase - Rebase operations
• cherry_pick - Cherry-pick commits
• revert - Revert commits
• create_tag/delete_tag - Tag management

Examples: >
	@git_read status
	@git_read log --count 5
	@git_edit stage --files ["src/main.lua"]
	@git_edit create_branch --branch_name "feature/new"
<

Safety features:
• Read-only operations require no confirmation
• Modifying operations require user confirmation
• Repository validation ensures operations in valid Git repositories
• Comprehensive error handling

==============================================================================
7. CONFIGURATION				*codecompanion-gitcommit-config*

*adapter*					Type: string
	The LLM adapter to use. If not specified, defaults to the adapter
	configured for CodeCompanion's chat strategy.

*model*						Type: string
	The specific model to use. If not specified, defaults to the model
	configured for CodeCompanion's chat strategy.

*languages*					Type: table
	A list of languages for generating commit messages. When specified,
	the extension will prompt you to select a language before generating.
	Example: { "English", "Chinese", "Japanese" }

*exclude_files*					Type: table
	A list of file patterns to exclude from git diff analysis. Supports
	glob patterns using * and ? wildcards.
	Example: { "*.pb.go", "*.min.js", "dist/*", "node_modules/*" }

*add_slash_command*				Type: boolean, Default: false
	When enabled, adds /gitcommit slash command to CodeCompanion chat buffers.

*add_git_tool*					Type: boolean, Default: true
	When enabled, adds @git_read and @git_edit tools to CodeCompanion chat buffers.

*add_git_commands*				Type: boolean, Default: true
	When enabled, adds :CodeCompanionGit and :CCGit commands.

*gitcommit_select_count*			Type: number, Default: 100
	Number of recent commits to show when using /gitcommit slash command.

*git_tool_auto_submit_errors*			Type: boolean, Default: false
	When enabled, automatically submits git tool error messages back to
	the LLM for analysis.

*git_tool_auto_submit_success*			Type: boolean, Default: false
	When enabled, automatically submits git tool success messages back to
	the LLM to continue the workflow.

Buffer configuration:

*buffer.enabled*				Type: boolean, Default: true
	Controls whether gitcommit buffer keymap integration is enabled.

*buffer.keymap*					Type: string, Default: "<leader>gc"
	The keymap used in gitcommit buffers to trigger commit message generation.

*buffer.auto_generate*				Type: boolean, Default: false
	When true, automatically generates commit message upon entering gitcommit buffer.

*buffer.auto_generate_delay*			Type: number, Default: 100
	The delay in milliseconds before triggering automatic generation.

==============================================================================
8. LICENSE					*codecompanion-gitcommit-license*

MIT License

vim:tw=78:ts=8:ft=help:norl:
